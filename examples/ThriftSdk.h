/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftSdk_H
#define ThriftSdk_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "EosThrift_types.h"

namespace eos {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ThriftSdkIf {
 public:
  virtual ~ThriftSdkIf() {}
  virtual bool exists(const std::string& intf) = 0;
  virtual bool adminEnabled(const std::string& intf) = 0;
  virtual void adminEnabledIs(const std::string& intf, const bool enabled) = 0;
  virtual void descriptionIs(const std::string& intf, const std::string& description) = 0;
  virtual OperStatus::type operStatus(const std::string& intf) = 0;
};

class ThriftSdkIfFactory {
 public:
  typedef ThriftSdkIf Handler;

  virtual ~ThriftSdkIfFactory() {}

  virtual ThriftSdkIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ThriftSdkIf* /* handler */) = 0;
};

class ThriftSdkIfSingletonFactory : virtual public ThriftSdkIfFactory {
 public:
  ThriftSdkIfSingletonFactory(const boost::shared_ptr<ThriftSdkIf>& iface) : iface_(iface) {}
  virtual ~ThriftSdkIfSingletonFactory() {}

  virtual ThriftSdkIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ThriftSdkIf* /* handler */) {}

 protected:
  boost::shared_ptr<ThriftSdkIf> iface_;
};

class ThriftSdkNull : virtual public ThriftSdkIf {
 public:
  virtual ~ThriftSdkNull() {}
  bool exists(const std::string& /* intf */) {
    bool _return = false;
    return _return;
  }
  bool adminEnabled(const std::string& /* intf */) {
    bool _return = false;
    return _return;
  }
  void adminEnabledIs(const std::string& /* intf */, const bool /* enabled */) {
    return;
  }
  void descriptionIs(const std::string& /* intf */, const std::string& /* description */) {
    return;
  }
  OperStatus::type operStatus(const std::string& /* intf */) {
    OperStatus::type _return = (OperStatus::type)0;
    return _return;
  }
};

typedef struct _ThriftSdk_exists_args__isset {
  _ThriftSdk_exists_args__isset() : intf(false) {}
  bool intf :1;
} _ThriftSdk_exists_args__isset;

class ThriftSdk_exists_args {
 public:

  ThriftSdk_exists_args(const ThriftSdk_exists_args&);
  ThriftSdk_exists_args& operator=(const ThriftSdk_exists_args&);
  ThriftSdk_exists_args() : intf() {
  }

  virtual ~ThriftSdk_exists_args() throw();
  std::string intf;

  _ThriftSdk_exists_args__isset __isset;

  void __set_intf(const std::string& val);

  bool operator == (const ThriftSdk_exists_args & rhs) const
  {
    if (!(intf == rhs.intf))
      return false;
    return true;
  }
  bool operator != (const ThriftSdk_exists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_exists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSdk_exists_pargs {
 public:


  virtual ~ThriftSdk_exists_pargs() throw();
  const std::string* intf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSdk_exists_result__isset {
  _ThriftSdk_exists_result__isset() : success(false) {}
  bool success :1;
} _ThriftSdk_exists_result__isset;

class ThriftSdk_exists_result {
 public:

  ThriftSdk_exists_result(const ThriftSdk_exists_result&);
  ThriftSdk_exists_result& operator=(const ThriftSdk_exists_result&);
  ThriftSdk_exists_result() : success(0) {
  }

  virtual ~ThriftSdk_exists_result() throw();
  bool success;

  _ThriftSdk_exists_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ThriftSdk_exists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftSdk_exists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_exists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSdk_exists_presult__isset {
  _ThriftSdk_exists_presult__isset() : success(false) {}
  bool success :1;
} _ThriftSdk_exists_presult__isset;

class ThriftSdk_exists_presult {
 public:


  virtual ~ThriftSdk_exists_presult() throw();
  bool* success;

  _ThriftSdk_exists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftSdk_adminEnabled_args__isset {
  _ThriftSdk_adminEnabled_args__isset() : intf(false) {}
  bool intf :1;
} _ThriftSdk_adminEnabled_args__isset;

class ThriftSdk_adminEnabled_args {
 public:

  ThriftSdk_adminEnabled_args(const ThriftSdk_adminEnabled_args&);
  ThriftSdk_adminEnabled_args& operator=(const ThriftSdk_adminEnabled_args&);
  ThriftSdk_adminEnabled_args() : intf() {
  }

  virtual ~ThriftSdk_adminEnabled_args() throw();
  std::string intf;

  _ThriftSdk_adminEnabled_args__isset __isset;

  void __set_intf(const std::string& val);

  bool operator == (const ThriftSdk_adminEnabled_args & rhs) const
  {
    if (!(intf == rhs.intf))
      return false;
    return true;
  }
  bool operator != (const ThriftSdk_adminEnabled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_adminEnabled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSdk_adminEnabled_pargs {
 public:


  virtual ~ThriftSdk_adminEnabled_pargs() throw();
  const std::string* intf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSdk_adminEnabled_result__isset {
  _ThriftSdk_adminEnabled_result__isset() : success(false) {}
  bool success :1;
} _ThriftSdk_adminEnabled_result__isset;

class ThriftSdk_adminEnabled_result {
 public:

  ThriftSdk_adminEnabled_result(const ThriftSdk_adminEnabled_result&);
  ThriftSdk_adminEnabled_result& operator=(const ThriftSdk_adminEnabled_result&);
  ThriftSdk_adminEnabled_result() : success(0) {
  }

  virtual ~ThriftSdk_adminEnabled_result() throw();
  bool success;

  _ThriftSdk_adminEnabled_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ThriftSdk_adminEnabled_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftSdk_adminEnabled_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_adminEnabled_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSdk_adminEnabled_presult__isset {
  _ThriftSdk_adminEnabled_presult__isset() : success(false) {}
  bool success :1;
} _ThriftSdk_adminEnabled_presult__isset;

class ThriftSdk_adminEnabled_presult {
 public:


  virtual ~ThriftSdk_adminEnabled_presult() throw();
  bool* success;

  _ThriftSdk_adminEnabled_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftSdk_adminEnabledIs_args__isset {
  _ThriftSdk_adminEnabledIs_args__isset() : intf(false), enabled(false) {}
  bool intf :1;
  bool enabled :1;
} _ThriftSdk_adminEnabledIs_args__isset;

class ThriftSdk_adminEnabledIs_args {
 public:

  ThriftSdk_adminEnabledIs_args(const ThriftSdk_adminEnabledIs_args&);
  ThriftSdk_adminEnabledIs_args& operator=(const ThriftSdk_adminEnabledIs_args&);
  ThriftSdk_adminEnabledIs_args() : intf(), enabled(0) {
  }

  virtual ~ThriftSdk_adminEnabledIs_args() throw();
  std::string intf;
  bool enabled;

  _ThriftSdk_adminEnabledIs_args__isset __isset;

  void __set_intf(const std::string& val);

  void __set_enabled(const bool val);

  bool operator == (const ThriftSdk_adminEnabledIs_args & rhs) const
  {
    if (!(intf == rhs.intf))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const ThriftSdk_adminEnabledIs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_adminEnabledIs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSdk_adminEnabledIs_pargs {
 public:


  virtual ~ThriftSdk_adminEnabledIs_pargs() throw();
  const std::string* intf;
  const bool* enabled;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSdk_adminEnabledIs_result {
 public:

  ThriftSdk_adminEnabledIs_result(const ThriftSdk_adminEnabledIs_result&);
  ThriftSdk_adminEnabledIs_result& operator=(const ThriftSdk_adminEnabledIs_result&);
  ThriftSdk_adminEnabledIs_result() {
  }

  virtual ~ThriftSdk_adminEnabledIs_result() throw();

  bool operator == (const ThriftSdk_adminEnabledIs_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftSdk_adminEnabledIs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_adminEnabledIs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSdk_adminEnabledIs_presult {
 public:


  virtual ~ThriftSdk_adminEnabledIs_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftSdk_descriptionIs_args__isset {
  _ThriftSdk_descriptionIs_args__isset() : intf(false), description(false) {}
  bool intf :1;
  bool description :1;
} _ThriftSdk_descriptionIs_args__isset;

class ThriftSdk_descriptionIs_args {
 public:

  ThriftSdk_descriptionIs_args(const ThriftSdk_descriptionIs_args&);
  ThriftSdk_descriptionIs_args& operator=(const ThriftSdk_descriptionIs_args&);
  ThriftSdk_descriptionIs_args() : intf(), description() {
  }

  virtual ~ThriftSdk_descriptionIs_args() throw();
  std::string intf;
  std::string description;

  _ThriftSdk_descriptionIs_args__isset __isset;

  void __set_intf(const std::string& val);

  void __set_description(const std::string& val);

  bool operator == (const ThriftSdk_descriptionIs_args & rhs) const
  {
    if (!(intf == rhs.intf))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const ThriftSdk_descriptionIs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_descriptionIs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSdk_descriptionIs_pargs {
 public:


  virtual ~ThriftSdk_descriptionIs_pargs() throw();
  const std::string* intf;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSdk_descriptionIs_result {
 public:

  ThriftSdk_descriptionIs_result(const ThriftSdk_descriptionIs_result&);
  ThriftSdk_descriptionIs_result& operator=(const ThriftSdk_descriptionIs_result&);
  ThriftSdk_descriptionIs_result() {
  }

  virtual ~ThriftSdk_descriptionIs_result() throw();

  bool operator == (const ThriftSdk_descriptionIs_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftSdk_descriptionIs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_descriptionIs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSdk_descriptionIs_presult {
 public:


  virtual ~ThriftSdk_descriptionIs_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftSdk_operStatus_args__isset {
  _ThriftSdk_operStatus_args__isset() : intf(false) {}
  bool intf :1;
} _ThriftSdk_operStatus_args__isset;

class ThriftSdk_operStatus_args {
 public:

  ThriftSdk_operStatus_args(const ThriftSdk_operStatus_args&);
  ThriftSdk_operStatus_args& operator=(const ThriftSdk_operStatus_args&);
  ThriftSdk_operStatus_args() : intf() {
  }

  virtual ~ThriftSdk_operStatus_args() throw();
  std::string intf;

  _ThriftSdk_operStatus_args__isset __isset;

  void __set_intf(const std::string& val);

  bool operator == (const ThriftSdk_operStatus_args & rhs) const
  {
    if (!(intf == rhs.intf))
      return false;
    return true;
  }
  bool operator != (const ThriftSdk_operStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_operStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftSdk_operStatus_pargs {
 public:


  virtual ~ThriftSdk_operStatus_pargs() throw();
  const std::string* intf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSdk_operStatus_result__isset {
  _ThriftSdk_operStatus_result__isset() : success(false) {}
  bool success :1;
} _ThriftSdk_operStatus_result__isset;

class ThriftSdk_operStatus_result {
 public:

  ThriftSdk_operStatus_result(const ThriftSdk_operStatus_result&);
  ThriftSdk_operStatus_result& operator=(const ThriftSdk_operStatus_result&);
  ThriftSdk_operStatus_result() : success((OperStatus::type)0) {
  }

  virtual ~ThriftSdk_operStatus_result() throw();
  OperStatus::type success;

  _ThriftSdk_operStatus_result__isset __isset;

  void __set_success(const OperStatus::type val);

  bool operator == (const ThriftSdk_operStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ThriftSdk_operStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftSdk_operStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftSdk_operStatus_presult__isset {
  _ThriftSdk_operStatus_presult__isset() : success(false) {}
  bool success :1;
} _ThriftSdk_operStatus_presult__isset;

class ThriftSdk_operStatus_presult {
 public:


  virtual ~ThriftSdk_operStatus_presult() throw();
  OperStatus::type* success;

  _ThriftSdk_operStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThriftSdkClient : virtual public ThriftSdkIf {
 public:
  ThriftSdkClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ThriftSdkClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool exists(const std::string& intf);
  void send_exists(const std::string& intf);
  bool recv_exists();
  bool adminEnabled(const std::string& intf);
  void send_adminEnabled(const std::string& intf);
  bool recv_adminEnabled();
  void adminEnabledIs(const std::string& intf, const bool enabled);
  void send_adminEnabledIs(const std::string& intf, const bool enabled);
  void recv_adminEnabledIs();
  void descriptionIs(const std::string& intf, const std::string& description);
  void send_descriptionIs(const std::string& intf, const std::string& description);
  void recv_descriptionIs();
  OperStatus::type operStatus(const std::string& intf);
  void send_operStatus(const std::string& intf);
  OperStatus::type recv_operStatus();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThriftSdkProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ThriftSdkIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThriftSdkProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_exists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_adminEnabled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_adminEnabledIs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_descriptionIs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_operStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftSdkProcessor(boost::shared_ptr<ThriftSdkIf> iface) :
    iface_(iface) {
    processMap_["exists"] = &ThriftSdkProcessor::process_exists;
    processMap_["adminEnabled"] = &ThriftSdkProcessor::process_adminEnabled;
    processMap_["adminEnabledIs"] = &ThriftSdkProcessor::process_adminEnabledIs;
    processMap_["descriptionIs"] = &ThriftSdkProcessor::process_descriptionIs;
    processMap_["operStatus"] = &ThriftSdkProcessor::process_operStatus;
  }

  virtual ~ThriftSdkProcessor() {}
};

class ThriftSdkProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThriftSdkProcessorFactory(const ::boost::shared_ptr< ThriftSdkIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ThriftSdkIfFactory > handlerFactory_;
};

class ThriftSdkMultiface : virtual public ThriftSdkIf {
 public:
  ThriftSdkMultiface(std::vector<boost::shared_ptr<ThriftSdkIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThriftSdkMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThriftSdkIf> > ifaces_;
  ThriftSdkMultiface() {}
  void add(boost::shared_ptr<ThriftSdkIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool exists(const std::string& intf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exists(intf);
    }
    return ifaces_[i]->exists(intf);
  }

  bool adminEnabled(const std::string& intf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->adminEnabled(intf);
    }
    return ifaces_[i]->adminEnabled(intf);
  }

  void adminEnabledIs(const std::string& intf, const bool enabled) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->adminEnabledIs(intf, enabled);
    }
    ifaces_[i]->adminEnabledIs(intf, enabled);
  }

  void descriptionIs(const std::string& intf, const std::string& description) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->descriptionIs(intf, description);
    }
    ifaces_[i]->descriptionIs(intf, description);
  }

  OperStatus::type operStatus(const std::string& intf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->operStatus(intf);
    }
    return ifaces_[i]->operStatus(intf);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ThriftSdkConcurrentClient : virtual public ThriftSdkIf {
 public:
  ThriftSdkConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ThriftSdkConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool exists(const std::string& intf);
  int32_t send_exists(const std::string& intf);
  bool recv_exists(const int32_t seqid);
  bool adminEnabled(const std::string& intf);
  int32_t send_adminEnabled(const std::string& intf);
  bool recv_adminEnabled(const int32_t seqid);
  void adminEnabledIs(const std::string& intf, const bool enabled);
  int32_t send_adminEnabledIs(const std::string& intf, const bool enabled);
  void recv_adminEnabledIs(const int32_t seqid);
  void descriptionIs(const std::string& intf, const std::string& description);
  int32_t send_descriptionIs(const std::string& intf, const std::string& description);
  void recv_descriptionIs(const int32_t seqid);
  OperStatus::type operStatus(const std::string& intf);
  int32_t send_operStatus(const std::string& intf);
  OperStatus::type recv_operStatus(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
